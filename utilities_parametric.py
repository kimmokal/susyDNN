def sample_encode(sample_name):
    encode_dict={'total_SIGNAL' : 1,
                            'TTJets_LO_HT600to800_ext' : 7,
                            'TTJets_LO_HT800to1200_ext' : 8,
                            'TTJets_LO_HT1200to2500_ext' : 9,
                            'TTJets_LO_HT2500toInf_ext' : 10,
                            'TTJets_SingleLeptonFromTbar' : 11,
                            'TTJets_SingleLeptonFromT' : 12,
                            'T_tch_powheg' : 13,
                            'T_tWch_ext' : 14,
                            'TToLeptons_sch_amcatnlo' : 15,
                            'TTJets_DiLepton' : 16,
                            'TBar_tWch_ext' : 17,
                            'TBar_tch_powheg' : 18,
                            'WJetsToLNu_HT400to600' : 19,
                            'WJetsToLNu_HT600to800' : 20,
                            'WJetsToLNu_HT800to1200' : 21,
                            'WJetsToLNu_HT1200to2500' : 22,
                            'WJetsToLNu_HT2500toInf' : 23,
                            'QCD_HT500to700' : 24,
                            'QCD_HT700to1000' : 25,
                            'QCD_HT1000to1500' : 26,
                            'QCD_HT1500to2000' : 27,
                            'QCD_HT2000toInf' : 28,
                            'DYJetsToLL_M50_HT400to600' : 29,
                            'DYJetsToLL_M50_HT600to800' : 30,
                            'DYJetsToLL_M50_HT800to1200' : 31,
                            'DYJetsToLL_M50_HT1200to2500' : 32,
                            'DYJetsToLL_M50_HT2500toInf' : 33,
                            'TTJets_DiLepton_ext' : 34,
                            'TTDileptonic_MiniAOD' : 35}
    return encode_dict.get(sample_name)

def sample_decode(number):
        decode_dict={1 : 'total_SIGNAL',
                                7 : 'TTJets_LO_HT600to800_ext',
                                8 : 'TTJets_LO_HT800to1200_ext',
                                9 : 'TTJets_LO_HT1200to2500_ext',
                                10 : 'TTJets_LO_HT2500toInf_ext',
                                11 : 'TTJets_SingleLeptonFromTbar',
                                12 : 'TTJets_SingleLeptonFromT',
                                13 : 'T_tch_powheg',
                                14 : 'T_tWch_ext',
                                15 : 'TToLeptons_sch_amcatnlo',
                                16 : 'TTJets_DiLepton',
                                17 : 'TBar_tWch_ext',
                                18 : 'TBar_tch_powheg',
                                19 : 'WJetsToLNu_HT400to600',
                                20 : 'WJetsToLNu_HT600to800',
                                21 : 'WJetsToLNu_HT800to1200',
                                22 : 'WJetsToLNu_HT1200to2500',
                                23 : 'WJetsToLNu_HT2500toInf',
                                24 : 'QCD_HT500to700',
                                25 : 'QCD_HT700to1000',
                                26 : 'QCD_HT1000to1500',
                                27 : 'QCD_HT1500to2000',
                                28 : 'QCD_HT2000toInf',
                                29 : 'DYJetsToLL_M50_HT400to600',
                                30 : 'DYJetsToLL_M50_HT600to800',
                                31 : 'DYJetsToLL_M50_HT800to1200',
                                32 : 'DYJetsToLL_M50_HT1200to2500',
                                33 : 'DYJetsToLL_M50_HT2500toInf',
                                34: 'TTJets_DiLepton_ext',
                                35: 'TTDileptonic_MiniAOD'}
        return decode_dict.get(number)
